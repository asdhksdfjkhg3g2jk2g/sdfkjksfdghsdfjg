
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/Revenant", true))()


local plr = game.Players.LocalPlayer
local watermark = Library:Window({
   Text = "UEX V1"
})
local Window = Library:Window({
   Text = "Bypass"
})
local Window2 = Library:Window({
   Text = "Manipulations"
})


local default_grav = workspace.Gravity
Window:Toggle({
   Text = "Inf Jump Bypass",
   Callback = newcclosure(function(v)
        getgenv().inf = v
        local table1 = getrawmetatable(game.Workspace)
            
        setreadonly(table1, false)
        
        local origin1 = table1.__index
        
        table1.__index = newcclosure(function(self, property)
            
            if property == "Gravity" and getgenv().inf then
                return default_grav
            end
            return origin1(self, property)
        end)
        game:GetService("UserInputService").JumpRequest:Connect(function(key)
                
            if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and getgenv().inf then
                plr.Character.HumanoidRootPart.Velocity = Vector3.new(plr.Character.HumanoidRootPart.Velocity.X, 35, plr.Character.HumanoidRootPart.Velocity.Z)
                game.Workspace.Gravity = 50
                task.wait(0.35)
                game.Workspace.Gravity = default_grav
            end

        end)
        if not getgenv().inf then
            table1.__index = origin1
            game.Workspace.Gravity = default_grav
        end
   end)
})

local speed, jump
Window:Slider({
   Text = "Walk Speed Bypass",
   Default = 40,
   Minimum = 1,
   Maximum = 250,
   Callback = function(value)
       speed = value
   end
})

Window:Slider({
   Text = "Jump Boost Bypass",
   Default = 40,
   Minimum = 1,
   Maximum = 150,
   Callback = function(value)
       jump = value
   end
})

local default_Speed = game.StarterPlayer.CharacterWalkSpeed
local default_Jump = game.StarterPlayer.CharacterJumpPower
Window:Toggle({
   Text = "Enabled",
   Callback = newcclosure(function(v)
       getgenv().change = v
        if getgenv().change then
            local table = getrawmetatable(plr.Character:WaitForChild("Humanoid"))
            
            setreadonly(table, false)
            
            local origin = table.__index
            
            table.__index = newcclosure(function(self, property)
                
                if property == "WalkSpeed" and getgenv().change and not checkcaller() then
                    return default_Speed
                elseif property == "JumpPower" or property == "JumpHeight" and getgenv().change and not checkcaller() then
                    return default_Jump
                end
                return origin(self, property)
            end)
            task.spawn(function()
                while task.wait() and getgenv().change and plr.Character and plr.Character:FindFirstChild("Humanoid") do
                    plr.Character.Humanoid.WalkSpeed = speed
                    plr.Character.Humanoid.JumpPower = jump
                    plr.Character.Humanoid.JumpHeight = jump
                end
            end)
            if not getgenv().change then
                table.__index = origin
                plr.Character.Humanoid.WalkSpeed = default_Speed
                plr.Character.Humanoid.JumpPower = default_Jump
                plr.Character.Humanoid.JumpHeight = default_Jump
            end
        end
   end)
})
Window:Toggle({
   Text = "Simple Anti Kick",
   Callback = newcclosure(function(Value)
       getgenv().akick = Value
	
        if getgenv().akick then
            
            local kick_table = getrawmetatable(plr)
            
            setreadonly(kick_table, false)
            
            local old = kick_table.__namecall
            
            kick_table.__namecall = newcclosure(function(self, ...)
                if getgenv().akick and getnamecallmethod() == "Kick" then
                    return nil
                else
                    return old(self, ...)
                end
                
            end)
        else
            kick_table.__namecall = old
            
        end
   end)
})
Window2:Toggle({
   Text = "Simple Desync",
   Callback = newcclosure(function(Value)
       getgenv().fdesync = Value
        task.spawn(newcclosure(function()
            while task.wait() and getgenv().fdesync do
                if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    plr.Character.HumanoidRootPart.Anchored = true
                    plr.Character.HumanoidRootPart.Anchored = false
                end
            end
        end))
   end)
})

Window:Toggle({
   Text = "Noclip Bypass",
   Callback = newcclosure(function(Value)
        getgenv().nc = Value
        local position_to_teleport = nil
        local stopped = false
        for _, i in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do

            if getgenv().nc then
                if i:IsA("Part") or i:IsA("BasePart") then
                    i.CanCollide = false
                end
            elseif not getgenv().nc then
                if i.Name == "LeftLeg" or i.Name == "RightLeg" or i.Name == "LeftLowerLeg" or i.Name == "RightLowerLeg" then
                    i.CanCollide = true
                end
            end

        end
        
        local renderstep = game:GetService("RunService").RenderStepped:Connect(newcclosure(function()
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and not stopped then
                position_to_teleport = plr.Character:FindFirstChild("HumanoidRootPart").CFrame.Position
            end
        end))

        local connection = plr.Character:WaitForChild("HumanoidRootPart").Changed:Connect(newcclosure(function(property)
            
            if property == "Position" or property == "CFrame" then
                stopped = true
                for i = 0, 5 do
                    plr.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(position_to_teleport)
                end
                stopped = false
            end
        
        end))

        local table_noclip = getrawmetatable(plr.Character)
        local orig_noclip = table_noclip.__index
        setreadonly(table_noclip, false)
        table_noclip.__index = function(self, property)

            if property == "CanCollide" and not checkcaller() then
                return true
            end
            return orig_noclip(self, property)
        end

        if not getgenv().nc then
            connection:Disconnect()
            renderstep:Disconnect()
            table_noclip.__index = orig_noclip
        end
   end)
})
